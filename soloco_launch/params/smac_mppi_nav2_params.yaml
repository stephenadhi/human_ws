# The BT Navigator (Behavior Tree Navigator) module implements the NavigateToPose task interface.
# It is a Behavior Tree-based implementation of navigation that is intended to allow for
# flexibility in the navigation task and provide a way to easily specify complex robot behaviors,
# including recovery.
bt_navigator:
  ros__parameters:
    default_nav_to_pose_bt_xml: "/home/locobot/interbotix_ws/src/human_ws/soloco_launch/config/behavior_trees/navigate_to_pose_w_replanning_and_recovery.xml"
    default_nav_through_poses_bt_xml: "/home/locobot/interbotix_ws/src/human_ws/soloco_launch/config/behavior_trees/navigate_through_poses_w_replanning_and_recovery.xml"
    # Reference frame. (default: map)
    global_frame: locobot/odom
    # Path to behavior tree XML description. (default: base_link)
    robot_base_frame: locobot/base_link
    # Topic on which odometry is published. (default: odom)
    odom_topic: /locobot/odom
    # Duration (in milliseconds) for each iteration of BT execution. (default: 10)
    bt_loop_duration: 10
    # Default timeout value (in milliseconds) while a BT action node is waiting for acknowledgement
    # from an action server. This value will be overwritten for a BT node if the input port
    # “server_timeout” is provided. (default: 20)
    default_server_timeout: 50
    # Blackboard variable to use to supply the goal to the behavior tree for NavigateToPose. Should
    # match ports of BT XML file. (default: "goal")
    goal_blackboard_id: "goal"
    # Blackboard variable to get the path from the behavior tree for NavigateThroughPoses feedback.
    # Should match port names of BT XML file. (default: "path")
    path_blackboard_id: "path"
    # Blackboard variable to use to supply the goals to the behavior tree for NavigateThroughPoses.
    # Should match ports of BT XML file. (default: "goals")
    goals_blackboard_id: "goals"
    enable_groot_monitoring: True
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_smooth_path_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_assisted_teleop_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_drive_on_heading_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_globally_updated_goal_condition_bt_node
    - nav2_is_path_valid_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_truncate_path_local_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_path_expiring_timer_condition
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_goal_updated_controller_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node
    - nav2_controller_cancel_bt_node
    - nav2_path_longer_on_approach_bt_node
    - nav2_wait_cancel_bt_node
    - nav2_spin_cancel_bt_node
    - nav2_back_up_cancel_bt_node
    - nav2_assisted_teleop_cancel_bt_node
    - nav2_drive_on_heading_cancel_bt_node

# The Controller Server implements the server for handling the controller requests for the stack
# and host a map of plugin implementations. It will take in path and plugin names for controller,
# progress checker and goal checker to use and call the appropriate plugins.
controller_server:
  ros__parameters:
    # Frequency to run controller (Hz). (default 20.0)
    controller_frequency: 20.0
    # The controller server filters the velocity portion of the odometry messages received before
    # sending them to the controller plugin. Odometry values below this threshold (in m/s) will be
    # set to 0.0. (default: 0.0001)
    min_x_velocity_threshold: 0.001
    # The controller server filters the velocity portion of the odometry messages received before
    # sending them to the controller plugin. Odometry values below this threshold (in m/s) will be
    # set to 0.0. For non-holonomic robots (default: 0.0001)
    min_y_velocity_threshold: 0.0001
    # The controller server filters the velocity portion of the odometry messages received before
    # sending them to the controller plugin. Odometry values below this threshold (in rad/s) will
    # be set to 0.0. (default: 0.0001)
    min_theta_velocity_threshold: 0.001
    # The maximum duration in seconds the called controller plugin can fail (i.e. the
    # computeVelocityCommands function of the plugin throwing an exception) before the
    # nav2_msgs::action::FollowPath action fails. Setting it to the special value of -1.0 makes it
    # infinite, 0 to disable, and any positive value for the appropriate timeout. (default: 0.0)
    failure_tolerance: 0.0
    # Topic to get instantaneous measurement of speed from. (default: "odom")
    odom_topic: "/locobot/odom"
    # Mapped name for progress checker plugin for checking progress made by robot. (default:
    # "progress_checker")
    progress_checker_plugin: "ProgressChecker"
    # Mapped name for goal checker plugin for checking goal is reached. (default: ["goal_checker"])
    goal_checker_plugins: ["GoalChecker"]
    # List of mapped names for controller plugins for processing requests and parameters. (default:
    # ["FollowPath"])
    controller_plugins: ["FollowPath"]
    # Progress checker parameters
    ProgressChecker:
      plugin: "nav2_controller::SimpleProgressChecker"
      # Minimum amount a robot must move to be progressing to goal (m). (default: 0.5)
      required_movement_radius: 0.2
      # Maximum amount of time a robot has to move the minimum radius (s). (default 10.0)
      movement_time_allowance: 20.0
    # Goal checker parameters
    GoalChecker:
      plugin: "nav2_controller::SimpleGoalChecker"
      # Whether to check for XY position tolerance after rotating to goal orientation in case of
      # minor localization changes. (default: true)
      stateful: True
      # Tolerance to meet goal completion criteria (m). (default: 0.25)
      xy_goal_tolerance: 0.25
      # Tolerance to meet goal completion criteria (rad). (default: 0.25)
      yaw_goal_tolerance: 0.1
    # MPPI parameters
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 96
      model_dt: 0.05
      batch_size: 1000
      vx_std: 0.2
      vy_std: 0.2
      wz_std: 0.4
      vx_max: 0.5
      vx_min: -0.35
      vy_max: 0.5
      wz_max: 1.9
      iteration_count: 1
      prune_distance: 4.0
      transform_tolerance: 0.2
      temperature: 0.3
      gamma: 0.015
      motion_model: "DiffDrive"
      visualize: false
      reset_period: 1.0 # (only in Humble)
      TrajectoryVisualizer:
        trajectory_step: 5
        time_step: 3
      AckermannConstrains:
        min_turning_r: 0.2
      critics: ["ConstraintCritic", "ObstaclesCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"]
      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0
      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 1.0
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 0.4
      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 0.4
      ObstaclesCritic:
        enabled: true
        cost_power: 1
        repulsion_weight: 1.5
        critical_weight: 20.0
        consider_footprint: false
        collision_cost: 10000.0
        collision_margin_distance: 0.1
        near_goal_distance: 0.5
        inflation_radius: 0.55 # (only in Humble)
        cost_scaling_factor: 5.0 # (only in Humble)
      PathAlignCritic:
        enabled: true
        cost_power: 1
        cost_weight: 14.0
        max_path_occupancy_ratio: 0.05
        trajectory_point_step: 3
        threshold_to_consider: 0.40
        offset_from_furthest: 20
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        offset_from_furthest: 5
        threshold_to_consider: 0.6
      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 4
        threshold_to_consider: 0.40
        max_angle_to_furthest: 1.0
      # TwirlingCritic:
      #   enabled: true
      #   twirling_cost_power: 1
      #   twirling_cost_weight: 10.0

# The Costmap 2D package implements a 2D grid-based costmap for environmental representations and a
# number of sensor processing plugins. It is used in the planner and controller servers for
# creating the space to check for collisions or higher cost areas to negotiate around.
local_costmap:
  local_costmap:
    ros__parameters:
      # Whether to send full costmap every update, rather than updates. (default: false)
      always_send_full_costmap: True
      # Costmap update frequency. (default 5.0)
      update_frequency: 10.0
      # Frequency to publish costmap to topic. (default 1.0)
      publish_frequency: 10.0
      # Reference frame. (default: odom)
      global_frame: locobot/odom
      # Robot base frame. (default: base_link)
      robot_base_frame: locobot/base_link
      # Whether costmap should roll with robot base frame. (default: False)
      rolling_window: True
      # Height of costmap (m). (default: 5)
      width: 8
      # Width of costmap (m). (default: 5)
      height: 8
      # Resolution of 1 pixel of the costmap, in meters. (default: 0.1)
      resolution: 0.05
      # Robot radius to use, if footprint coordinates not provided. (default: 0.1)
      robot_radius: 0.175
      # List of mapped plugin names for parameter namespaces and names. Note: Each plugin namespace
      # defined in this list needs to have a plugin parameter defining the type of plugin to be
      # loaded in the namespace.
      plugins: ["obstacle_people_filtered_layer", "inflation_layer"] #, "social_layer"]
      obstacle_people_filtered_layer:
        plugin: "nav2_soloco_costmap_plugin/ObstaclePeopleFilteredLayer"
        # Whether the plugin is enabled. (default: True)
        enabled: True
        # Whether the people filtering is enabled. (default: True)
        people_filtering_enabled: True
        # Whether the people transformation is used. (default: False)
        use_people_tf: False        
        # Tf prefix of detected people. (if using people_tf)
        tf_prefix: "agent_"
        # Topic name of detected people. (if not using people_tf)
        people_topic: "/human/interpolated_history"
        # Robot odometry topic 
        odom_topic: "/locobot/odom"
        # People filter radius. (default: 0.32)
        filter_radius: 0.4
        # Minimum agent distance from robot, if zero all people are filtered (default: 0.0)
        filter_min_distance: 0.7
        # Clear any occupied cells under robot footprint.
        footprint_clearing_enabled: True
        # Maximum height to add return to occupancy grid. (default: 2.0)
        max_obstacle_height: 2.0
        # Enum for method to add data to master costmap, default to maximum. (default: 1)
        combination_method: 0
        # namespace of sources of data.
        observation_sources: scan #, zed_camera
        scan:
          # Topic of data.
          topic: /locobot/scan
          # Frame of sensor, to use if not provided by message. If empty, uses message frame_id.
          sensor_frame: ""
          # How long to store messages in a buffer to add to costmap before removing them (s).
          # (default: 0.0)
          observation_persistence: 0.0
          # Expected rate to get new data from sensor. (default: 0.0)
          expected_update_rate: 0.0
          # Data type of input, LaserScan or PointCloud2. (default: LaserScan)
          data_type: "LaserScan"
          # Minimum height to add return to occupancy grid. (default: 0.0)
          min_obstacle_height: 0.2
          # Maximum height to add return to occupancy grid. (default: 0.0)
          max_obstacle_height: 2.0
          # Are infinite returns from laser scanners valid measurements to raycast. (default:
          # False)
          inf_is_valid: False
          # Whether source should mark in costmap. (default: True)
          marking: True
          # Whether source should raytrace clear in costmap. (default: False)
          clearing: True
          # Maximum range to mark obstacles in costmap. (default: 2.5)
          obstacle_max_range: 4.0
          # Minimum range to mark obstacles in costmap. (default: 0.0)
          obstacle_min_range: 0.05
          # Maximum range to raytrace clear obstacles from costmap. (default: 3.0)
          raytrace_max_range: 4.0
          # Minimum range to raytrace clear obstacles from costmap. (default: 0.0)
          raytrace_min_range: 0.0

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 5.0
        inflation_radius: 0.3

      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        # https://navigation.ros.org/configuration/packages/costmap-plugins/static.html

        # QoS settings for map topic. (default: True)
        map_subscribe_transient_local: True

# The Costmap 2D package implements a 2D grid-based costmap for environmental representations and a
# number of sensor processing plugins. It is used in the planner and controller servers for
# creating the space to check for collisions or higher cost areas to negotiate around.
global_costmap:
  global_costmap:
    ros__parameters:
      # Whether to send full costmap every update, rather than updates. (default: false)
      always_send_full_costmap: True
      # Amount to pad footprint (m). (default: 0.01)
      footprint_padding: 0.01
      # Reference frame. (default: map)
      global_frame: locobot/odom
      # Minimum cost of an occupancy grid map to be considered a lethal obstacle. (default: 100)
      lethal_cost_threshold: 100
      # Topic of map from map_server or SLAM. (default: map)
      map_topic: map
      # X origin of the costmap relative to width (m). (default: 0.0)
      origin_x: 0.0
      # Y origin of the costmap relative to height (m). (default: 0.0)
      origin_y: 0.0
      # Frequency to publish costmap to topic. (default 1.0)
      publish_frequency: 1.0
      # Height of costmap (m). (default: 5)
      width: 20
      # Width of costmap (m). (default: 5)
      height: 20
      # Resolution of 1 pixel of the costmap, in meters. (default: 0.1)
      resolution: 0.1
      # Robot base frame. (default: base_link)
      robot_base_frame: locobot/base_link
      # Robot radius to use, if footprint coordinates not provided. (default: 0.1)
      robot_radius: 0.2
      # Whether costmap should roll with robot base frame. (default: False)
      rolling_window: True
      # If false, treats unknown space as free space, else as unknown space. (default: False)
      track_unknown_space: True
      # TF transform tolerance. (default: 0.3)
      transform_tolerance: 0.5
      # If occupancy grid map should be interpreted as only 3 values (free, occupied, unknown) or
      # with its stored values. (default: True)
      trinary_costmap: True
      # Cost of unknown space if tracking it. (default: 255)
      unknown_cost_value: 255
      # Costmap update frequency. (default 5.0)
      update_frequency: 5.0
      # Whether when combining costmaps to use the maximum cost or override. (default: False)
      use_maximum: False
      # List of mapped plugin names for parameter namespaces and names. Note: Each plugin namespace
      # defined in this list needs to have a plugin parameter defining the type of plugin to be
      # loaded in the namespace.
      plugins: ["obstacle_people_filtered_layer", "inflation_layer"]
      obstacle_people_filtered_layer:
        plugin: "nav2_soloco_costmap_plugin/ObstaclePeopleFilteredLayer"
        # Whether the plugin is enabled. (default: True)
        enabled: True
        # Whether the people filtering is enabled. (default: True)
        people_filtering_enabled: True
        # Whether the people transformation is used. (default: False)
        use_people_tf: False        
        # Tf prefix of detected people. (if using people_tf)
        tf_prefix: "agent_"
        # Topic name of detected people. (if not using people_tf)
        people_topic: "/human/interpolated_history"
        # Robot odometry topic 
        odom_topic: "/locobot/odom"
        # People filter radius. (default: 0.32)
        filter_radius: 0.4
        # Minimum agent distance from robot, if zero all people are filtered (default: 0.0)
        filter_min_distance: 0.0
        # Clear any occupied cells under robot footprint.
        footprint_clearing_enabled: True
        # Maximum height to add return to occupancy grid. (default: 2.0)
        max_obstacle_height: 2.0
        # Enum for method to add data to master costmap, default to maximum. (default: 1)
        combination_method: 0
        # namespace of sources of data.
        observation_sources: scan #, zed_camera
        scan:
          # Topic of data.
          topic: /locobot/scan
          # Frame of sensor, to use if not provided by message. If empty, uses message frame_id.
          sensor_frame: ""
          # How long to store messages in a buffer to add to costmap before removing them (s).
          # (default: 0.0)
          observation_persistence: 0.0
          # Expected rate to get new data from sensor. (default: 0.0)
          expected_update_rate: 0.0
          # Data type of input, LaserScan or PointCloud2. (default: LaserScan)
          data_type: "LaserScan"
          # Minimum height to add return to occupancy grid. (default: 0.0)
          min_obstacle_height: 0.2
          # Maximum height to add return to occupancy grid. (default: 0.0)
          max_obstacle_height: 2.0
          # Are infinite returns from laser scanners valid measurements to raycast. (default:
          # False)
          inf_is_valid: False
          # Whether source should mark in costmap. (default: True)
          marking: True
          # Whether source should raytrace clear in costmap. (default: False)
          clearing: True
          # Maximum range to mark obstacles in costmap. (default: 2.5)
          obstacle_max_range: 10.0
          # Minimum range to mark obstacles in costmap. (default: 0.0)
          obstacle_min_range: 0.05
          # Maximum range to raytrace clear obstacles from costmap. (default: 3.0)
          raytrace_max_range: 10.0
          # Minimum range to raytrace clear obstacles from costmap. (default: 0.0)
          raytrace_min_range: 0.0

      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        # https://navigation.ros.org/configuration/packages/costmap-plugins/static.html
        # Whether the static_layer plugin is enabled. (default: True)
        enabled: True
        # Subscribe to static map updates after receiving first. (default: False)
        subscribe_to_updates: False
        # QoS settings for map topic. (default: True)
        map_subscribe_transient_local: True
        # TF tolerance. (default: 0.0)
        transform_tolerance: 0.0
        # Map topic to subscribe to. If left empty the map topic will default to the global
        # map_topic parameter in costmap_2d_ros. (default: "")
        map_topic: ""

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        # https://navigation.ros.org/configuration/packages/costmap-plugins/inflation.html
        # Whether the inflation_layer plugin is enabled. (default: True)
        enabled: True
        # Radius to inflate costmap around lethal obstacles. (default: 0.55)
        inflation_radius: 0.55
        # Exponential decay factor across inflation radius. (default: 10.0)
        cost_scaling_factor: 10.0
        # Whether to inflate unknown cells as if lethal. (default: False)
        inflate_unknown: False
        # Whether to inflate unknown cells. (default: False)
        inflate_around_unknown: False

# The Map Server implements the server for handling the map load requests for the stack and host a
# map topic. It also implements a map saver server which will run in the background and save maps
# based on service requests. There exists a map saver CLI similar to ROS 1 as well for a single map
# save.
map_server:
  ros__parameters:
    # https://navigation.ros.org/configuration/packages/configuring-map-server.html
    # Whether to use simulation time. This paremeter will always be rewritten from the launch file.
    use_sim_time: False
    # Path to map yaml file. 
    yaml_filename: ""
    # Topic to publish loaded map to. (default: "map")
    topic_name: "map"
    # Frame to publish loaded map in. (default: "map")
    frame_id: "map"

map_saver:
  ros__parameters:
    # https://navigation.ros.org/configuration/packages/configuring-map-server.html
    # Timeout to attempt saving the map (seconds). (default: 2)
    save_map_timeout: 5.0
    # Free space maximum probability threshold value for occupancy grid. (default: 0.25)
    free_thresh_default: 0.25
    # Occupied space minimum probability threshold value for occupancy grid. (default: 0.65)
    occupied_thresh_default: 0.65
    # QoS settings for map topic. (default: True)
    map_subscribe_transient_local: True

# The Planner Server implements the server for handling the planner requests for the stack and host
# a map of plugin implementations. It will take in a goal and a planner plugin name to use and call
# the appropriate plugin to compute a path to the goal.
planner_server:
  ros__parameters:
    planner_plugins: ["GridBased"]
    use_sim_time: False
    expected_planner_frequency: 5.0
    transform_tolerance: 0.3
    GridBased:
      plugin: "nav2_smac_planner/SmacPlanner2D"
      tolerance: 0.25                       # tolerance for planning if unable to reach exact pose, in meters
      downsample_costmap: false             # whether or not to downsample the map
      downsampling_factor: 1                # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: true                   # allow traveling in unknown space
      max_iterations: 1000000               # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_on_approach_iterations: 1000      # maximum number of iterations to attempt to reach goal once in tolerance
      max_planning_time: 0.2                # max time in s for planner to plan, smooth
      cost_travel_multiplier: 1.0           # Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      use_final_approach_orientation: false # Whether to set the final path pose at the goal's orientation to the requested orientation (false) or in line with the approach angle so the robot doesn't rotate to heading (true)
      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1e-10

behavior_server:
  ros__parameters:
    # https://navigation.ros.org/configuration/packages/configuring-behavior-server.html?highlight=recoveries_server
    # Raw local costmap topic for collision checking. (default: local_costmap/costmap_raw)
    local_costmap_topic: local_costmap/costmap_raw
    # Topic for footprint in the local costmap frame. (default: local_costmap/published_footprint)
    local_footprint_topic: local_costmap/published_footprint
    # Raw global costmap topic for collision checking. (default: global_costmap/costmap_raw)
    global_costmap_topic: global_costmap/costmap_raw
    # Topic for footprint in the global costmap frame. (default: global_costmap/published_footprint)
    global_footprint_topic: global_costmap/published_footprint
    # Frequency to run behavior plugins. (default: 10.0)
    cycle_frequency: 10.0
    # TF transform tolerance. (default: 0.1)
    transform_tolerance: 0.3
    # Whether to use simulation time. This paremeter will always be rewritten from the launch file.
    use_sim_time: False
    # Locl reference frame. (default: odom)
    local_frame: locobot/odom
    # Global reference frame. (default: map)
    global_frame: map
    # Robot base frame. (default: base_link)
    robot_base_frame: locobot/base_link
    # List of plugin names to use, also matches action server names. Note: Each plugin namespace
    # defined in this list needs to have a plugin parameter defining the type of plugin to be
    # loaded in the namespace. (default: {“spin”, “back_up”, “drive_on_heading”, “wait”})
    behavior_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    wait:
      plugin: "nav2_behaviors/Wait"
    # Time to look ahead for collisions (s). (default: 2.0)
    simulate_ahead_time: 2.0
    # Maximum rotational velocity (rad/s). (default: 1.0)
    max_rotational_vel: 1.0
    # Minimum rotational velocity (rad/s). (default: 0.4)
    min_rotational_vel: 0.4
    # maximum rotational acceleration (rad/s^2). (default: 3.0)
    rotational_acc_lim: 3.2

# The Waypoint Follower module implements a way of doing waypoint following using the
# NavigateToPose action server. It will take in a set of ordered waypoints to follow and then try
# to navigate to them in order. It also hosts a waypoint task executor plugin which can be used to
# perform custom behavior at a waypoint like waiting for user instruction, taking a picture, or
# picking up a box. If a waypoint is not achievable, the stop_on_failure parameter will determine
# whether to continue to the next point or stop.
waypoint_follower:
  ros__parameters:
    # https://navigation.ros.org/configuration/packages/configuring-waypoint-follower.html
    # Whether to fail action task if a single waypoint fails. If false, will continue to next
    # waypoint. (default: True)
    stop_on_failure: True
    # Rate to check for results from current navigation task. (default: 20)
    loop_rate: 20
    # A plugin to define tasks to be executed when robot arrives to a waypoint. Note: The plugin
    # namespace defined needs to have a plugin parameter defining the type of plugin to be loaded
    # in the namespace. (default: wait_at_waypoint)
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      # https://navigation.ros.org/configuration/packages/nav2_waypoint_follower-plugins/wait_at_waypoint.html
      # Whether waypoint_task_executor plugin is enabled. (default: True)
      enabled: True
      # Amount of time in milliseconds, for robot to sleep/wait after each waypoint is reached. If
      # zero, robot will directly continue to next waypoint. (default: 0)
      waypoint_pause_duration: 200
